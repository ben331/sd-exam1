### Examen 3 - Proyecto final
**Universidad ICESI**  
**Curso:** Sistemas Distribuidos  
**Docente:** Joan S. Garcìa D.  
**Tema:** Kubernetes  
**Correo:** joan.garcia1 at correo.icesi.edu.co

## Objetivos
* Realizar el despliegue de una aplicación a través de Kubernetes
* Integrar servicios ejecutándose en nodos distintos

### Introduction
This test should demonstrate the creation of a simple service and the automation necessary to
package and deploy it to a Kubernetes cluster. 

### Task
Build a simple REST-based python application (a 'hello world' app is
fine) Build a Dockerfile that builds a working image, build a redis database and connect it with yourapp.  

Create the nexts k8s objects for the application:

• Defines a deployment 2 or more pods
• Defines a health check on the deployment that makes sure /health is responding
with a 200
• Defines a kubernetes service using ClusterIP
• Defines a kubernetes loadbalancer or kubernetes ingress (it give bonus) to allow traffic on to the pods vía internet.
For create the loadbalancer in a Local Cluster keep in mind that you have to install a add-ons that allow you simulate the LoadBalancer services.
For microk8s refer to -> https://microk8s.io/docs/addon-metallb

Create the nexts k8s objects for the database:
• Defines a deployment 2 or more pods
• Defines a kubernetes service using ClusterIP

You can take as base this app -> https://github.com/icesi-ops/training_docker/tree/master/05_docker_swarm/01_intro Just change the context of app !!

(You may manually set up ingress on your laptop, but you must provide instructions that get it working
on a clean k8s cluster)

--- (BONUS) -----
Create a script (either a standalone script or using Make, Rake, etc..) that automates building
and deploying the application to a k8s cluster.
The script should include the following options for performing the specific subtasks of an
endtoend deployment:
• Build
• Local unit or integration tests
• Package
• Deploy
• Smoke test

note: test phases should be executed using a test framework for your script language.
--- (END BONUS) ---

Include a README with the following:

• Clear breakdown of steps - assume that someone unfamiliar with your team's
environments, tooling should be able to read the docs and be able to execute the
different steps in their environment
• If you needed to put this service into production, what do you think it may be
missing? What would you add to it given more time?

Tools Needed

• Docker
• Kubernetes cluster available (can use a local cluster / docker-desktop / minikube / microk8s)
• Your scripting / programming language of choice
• Your favorite text editor

Hints
Add comments & documentation to your code! It's important that we understand not just
what was done, but why!
Google is your best friend, plagiarism is not.
After you're done, test this out in a clean environment from scratch, since we will want to try
and reproduce it if possible!

Judging criteria:
• Correctness. Does it do what we asked?
• Simplicity. Does the design match the task?
• Clarity. Can any competent programmer easily understand what's going on?
• Generality. It shouldn't be all hardcoded, but don't make it too abstract either.
• Tests and testability. It would be really great if you have tests. If not, it should be at
least possible to test this.
• Documentation:

• Can a junior developer get this running? Are requirements listed, including how to
install them? What platform did you develop and test your solution on? • Is there
just enough documentation, to tell us why the program works this way?
• If you tried to do something and weren't successful, that's fine! Just document as clearly
as possible what you were aiming to do, what research you did, what you tried, where
you hit issues, etc.
